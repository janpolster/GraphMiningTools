A tree sampler that extracts a set of trees from a given graph. 
Implemented 2014 by Pascal Welke. 

The input is a graph database in standard format. Each graph contained 
is processed with the selected sampling method and gf outputs a list of
trees for each graph, currently given in a canonical string format.

Some sampling methods involve a method to quickly estimate the number of 
spanning trees in a graph. The implemented algorithm returns an upper 
bound on the number of spanning trees, thus is always pessistic regarding
the number of enumerated spanning trees.


Usage: ts [options] [FILE]

By default, or if FILE is '-', ts reads from stdin. It always outputs to
stdout.

options: options (except -h and -u) are always followed by a value.

    without parameters: display this help screen

    -k v: number of trees you want to sample

    -t v: choose maximum number of spanning trees
        of a graph for which the listing algorithm should be invoked
        (default 100)

    -s 'method': tree subset selection method
        wilson:  sample k spanning trees uniformly at random using Wilsons 
                 algorithm (default)
        kruskal: sample k spanning trees using a uniformly drawn permutation
                 of the edge set as input to Kruskals MST algorithm 
        listing: sample k spanning trees uniformly at random using explicit
                 enumeration of all spanning trees
        mix:     sample k spanning trees uniformly at random using listing,
                 if there are expected to be less than t spanning trees, and
                 wilsons algorithm otherwise
        cactus:  sample k spanning trees uniformly at random using a specialized
                 method if the graph is a cactus and mix otherwise.
        partialListing: sample one spanning tree uniformly at random by returning
                        the ith spt for some random i between 1 and t if expected 
                        number of spanning trees is smaller than t. If there are 
                        expected to be more than t spanning trees, return one 
                        sampled using wilsons algorithm.
        bridgeForest:   return all trees that are left if the biconnected blocks
                        of the graph are removed
        listOrSample:   if there are expected to be less than t spanning trees,
                        return all of them, otherwise sample k spanning trees
                        uniformly at random using wilson

    -u: Skip the initial test if graphs are connected. Might be useful
        for bridgeForest, or if you have ensured that all input graphs are connected

    -r 'randomSeed': specify the random seed used for the sampling methods. If not
                     present, it is initialized from the current system time.

    -v: Be verbose and print the average number of trees found per graph up to isomorphism.

    -o 'format': choose output format
       canonicalString: output a list of canonical strings of sampled trees for each graph
                        This is the input expected by lwm (default)
       graph:           Output sampled trees as forest in the standard graph db format.
                        Graph number and activity of each forest are equal to the values
                        of the input graph.

    -h:  display this help

