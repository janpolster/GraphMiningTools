A stupid graph database processor that can evaluate some graph properties.\n
Written 2014 by Pascal Welke in an attempt to clean up the mess of 3 years\n
of writing theses.

Usage: gf [options] [FILE]

By default, or if FILE is '-', gf reads from stdin. It always outputs to
stdout.

For each graph in the input database, a measure, specified by the -f flag
is computed and compared to a value, specified by the -v flag by means of
a comparator specified by the -c flag. The output of gf is either the db 
of all graphs that satisfy the above condition or a list of those values 
or graph ids, which can be specified by the -o flag.

options: options (except -h) are always followed by a value.
    -h Output this help and exit
    -v 'value': an integer (default -1)
    -c 'comparator': (default <=)
        <=
        ==
        >=
        !=
        <
        >
    -f 'filter': specify which property of the graph or db is to be used
                 for comparison. (default count)
        *counting*
        graphName    the graph ids, or names, specified in the database
        count    running number of the graph (e.g. select the first 10 graphs)
             
        *labels* (labels are integer in our db format)
        label    the label of a graph, specified in the graph db
        AvsI    for AIDS99-target attributes
        AMvsI    for AIDS99-target attributes
        AvsMI    for AIDS99-target attributes
             
        *boolean properties* (return 0 or 1)
        connected    check if a graph is connected
        outerplanar     check if a graph is outerplanar
        tree     check if a graph is a tree
        cactus     check if a graph is a connected cactus graph
             
        *numerical properties*
        spanningTreeEstimate    compute an upper bound on the number of
                spanning trees in a graph
        numberOfBlocks    compute the number of biconnected blocks
        numberOfBridges    compute the number of bridges in a graph
             
        *TODO additional Parameter needed*
        spanningTreeListing     
