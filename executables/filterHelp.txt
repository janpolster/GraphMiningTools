A stupid graph database processor that can evaluate some graph properties.
Written 2014 by Pascal Welke in an attempt to clean up the mess of 3 years
of writing theses.

Usage: gf [options] [FILE]

By default, or if FILE is '-', gf reads from stdin. It always outputs to
stdout.

For each graph in the input database, a measure, specified by the -f flag
is computed and compared to a value, specified by the -v flag by means of
a comparator specified by the -c flag. The output of gf is either the db 
of all graphs that satisfy the above condition or a list of those values 
or graph ids, which can be specified by the -o flag.

options: options (except -h) are always followed by a value.
    
    -h Output this help and exit
    

    -v 'value': an integer (default -1)
    

    -c 'comparator': (default pass everything)
        <=
        ==
        >=
        !=
        <
        >


    -f 'filter': specify which property of the graph or db is to be used
                 for comparison. (default count)
        *counting*
        graphName    the graph ids, or names, specified in the database
        count        running number of the graph (e.g. select the 
                     first 10 graphs)
        randomSample returns a random number between 0 and 1000 for each
                     graph. Can be used for sampling a subset of the 
                     graphs. Random seed needs to be set via -r parameter
                     (default: current system time)
             
        *labels* (labels are integer in our db format)
        label    the label of a graph, specified in the graph db
             
        *boolean properties* (return 0 or 1)
        connected    check if a graph is connected
        path         check if a graph is a path
        tree         check if a graph is a tree
        cactus       check if a graph is a connected cactus graph
        outerplanar  check if a graph is outerplanar
        traceableCactus       check if the graph is a connected 
                              cactus graph and contains a Hamiltonian 
                              path
        
             
        *numerical properties*
        spanningTreeEstimate  upper bound on the number of
                              spanning trees in a graph
                              
        spanningTreeListing   exact number of spanning trees, or -1 if there 
                              are more than A spanningTrees (default 100). A 
                              can be set via the option -a A
                              
        nonisomorphicSpanningTrees: exact number of isomorphism classes of
                              the spanning trees of each graph. Works by 
                              listing all spanning trees and happily taking
                              forever if there are too many of them.
                              Works for connected graphs.
                              
        nonisomorphicSampledSpanningTrees: Draw -a uniformly random spanning 
                              trees from g and return the number of different
                              trees up to isomorphism if g is connected.
                              If g is disconnected, do the above for all con-
                              nected components and return the overall number
                              of nonisomorphic spanning trees of all connected
                              components.
                              
        nonisomorphicSampledSpanningTreesNormalized: Same as above, but normalized
                              by the number of connected components of g.
                              
        nonisomorphicLocallySampledSpanningTrees: Draw -a spanning trees for
                              each biconnected block of g and return the 
                              number of nonisomorphic spanning trees of g that
                              can be obtained by combining the local spanning 
                              trees in all possible ways.
                              If g is disconnected, do the above for all con-
                              nected components and return the overall number
                              of nonisomorphic spanning trees of all connected
                              components.
                              
	    nonisomorphicLocallySampledSpanningTreesNormalized: Same as above, but 
	                          normalized by the number of connected components of g.
	                          
        nonisomorphicLocallySampledSpanningTreesFiltered: Draw -a spanning trees
                              for each biconnected block of g. Remove duplicate
                              local trees (as lists of edges, not up to isomor-
                              phism) and return the number of nonisomorphic spa-
                              nning trees of g that can be obtained by combining 
                              the local spanning trees in all possible ways.
                              This method should (on average) return the same
                              result as nonisomorphicLocallySampledSpanningTrees.
                              If g is disconnected, do the above for all con-
                              nected components and return the overall number
                              of nonisomorphic spanning trees of all connected
                              components.
                              THIS METHOD IS EXPONENTIAL IN -a and g.
                              But it tells us how many isomorphism classes of 
                              spanning trees our localEasySampling algorithm 
                              considers.
                              
	    nonisomorphicLocallySampledSpanningTreesFilteredNormalized: Same as above, but
	                          normalized by the number of connected components of g.
	                          
        locallySampledSpanningTrees: Draw Draw -a spanning trees
                              for each biconnected block of g. Return the number 
                              of possible combinations of the drawn spanning trees.
                              If g is disconnected, do the above for all con-
                              nected components and return the overall sum
                              of spanning trees of all connected components.
                              This tells us how many spanning trees our 
                              localEasySampling algorithm implicitly considers.
                              
	    locallySampledSpanningTreesNormalized: Same as above, but normalized
                              by the number of connected components of g.
                              
        locallySampledSpanningTreesFiltered: Draw -a spanning trees
                              for each biconnected block of g. Remove duplicate
                              local trees (as lists of edges, not up to isomor-
                              phism) and return the number of possible combinations
                              of the drawn spanning trees.
                              If g is disconnected, do the above for all con-
                              nected components and return the overall sum
                              of spanning trees of all connected components.
                              This tells us how many spanning trees our 
                              localEasySampling algorithm implicitly considers.
                               
	    locallySampledSpanningTreesFilteredNormalized: Same as above, but normalized
                              by the number of connected components of g.
                              
        numberOfSimpleCycles  total number of simple cycles
                              in the graph
                              
        numberOfNonIsoCycles  number of nonisomorphic cycles
                              in the graph
                              
        numberOfBlocks        number of biconnected blocks
        
        numberOfBridges       number of bridges in a graph
        
        numberOfBridgeTrees   number of edges in the graph that are 
                              bridges. I.e. count the number of 
                              biconnected components with only one edge.
                              
        nomberOfBiconnectedComponents  number of biconnected components.
        
        numberOfConnectedComponents    number of connected components.
        
        maxBlocksPerComponent return the maximum number of (biconnected)
                              blocks per connected component of the graph.
                              
        numberOfVertices      number of vertices in the graph
        numberOfEdges         number of edges in the graph
        
        maxCycleDegree        maximum cycle degree of a graph
        minCycleDegree        minimum cycle degree of a graph
        
        maxLocalEasiness      maximum local easiness of a graph, or -1 if there 
                              are more than A spanningTrees in some block of
                              the graph (default 100). A can be set via 
                              the option -a A
                              
        minLocalEasiness       minimum local easiness of a graph, or -1 if there 
                              are more than A spanningTrees in all blocks of
                              the graph (default 100). A can be set via 
                              the option -a A
                              
        maxDegree             maximum vertex degree of a graph
        minDegree             minimum vertex degree of a graph


     -a 'value': an Integer (default 100). This value is used by some of the 
                 filters that need an additional parameter to work (e.g. 
                 spanningTreeListing)  
                 
     -r 'value': an Integer. Define the initial random seed. If the parameter
                 is not set, use the current system time as initial random seed.

     -o 'style': output style of the graphs fulfilling the filter criterion
        graph, g        output format identical to input format (default)
        idAndValue, iv  id of graph <space> value returned by filter 
                            criterion
        id, i           id of graph
        value, v        value returned by filter criterion
        print, p        print graphs in a very verbose format

