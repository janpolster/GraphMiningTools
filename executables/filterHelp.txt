A stupid graph database processor that can evaluate some graph properties.
Written 2014 by Pascal Welke in an attempt to clean up the mess of 3 years
of writing theses.

Usage: gf [options] [FILE]

By default, or if FILE is '-', gf reads from stdin. It always outputs to
stdout.

For each graph in the input database, a measure, specified by the -f flag
is computed and compared to a value, specified by the -v flag by means of
a comparator specified by the -c flag. The output of gf is either the db 
of all graphs that satisfy the above condition or a list of those values 
or graph ids, which can be specified by the -o flag.

options: options (except -h) are always followed by a value.
    
    -h Output this help and exit
    
    -v 'value': an integer (default -1)
    
    -c 'comparator': (default pass everything)
        <=
        ==
        >=
        !=
        <
        >

    -f 'filter': specify which property of the graph or db is to be used
                 for comparison. (default count)
        *counting*
        graphName    the graph ids, or names, specified in the database
        count        running number of the graph (e.g. select the 
                     first 10 graphs)
        randomSample returns a random number between 0 and 1000 for each
                     graph. Can be used for sampling a subset of the 
                     graphs. Random seed needs to be set via -a parameter
                     (default 100)
             
        *labels* (labels are integer in our db format)
        label    the label of a graph, specified in the graph db

        * the following filters remap the labels to 1 and -1 for the target
        * classes. AvsI maps moderately active labels to 0, thus filtering
        * ./gf -f AvsI -c '!=' -v 0  results in the Active vs. Inactive sub-
        * set of AIDS99. The other two filters just change the labels of all
        * graphs accordingly.
        AvsI     for AIDS99-target attributes
        AMvsI    for AIDS99-target attributes
        AvsMI    for AIDS99-target attributes
             
        *boolean properties* (return 0 or 1)
        connected    check if a graph is connected
        outerplanar  check if a graph is outerplanar
        tree         check if a graph is a tree
        cactus       check if a graph is a connected cactus graph
        traceableCactus       check if the graph is a connected 
                              cactus graph and contains a Hamiltonian 
                              path
             
        *numerical properties*
        spanningTreeEstimate  upper bound on the number of
                              spanning trees in a graph
        spanningTreeListing   exact number of spanning trees, or -1 if there 
                              are more than A spanningTrees (default 100). A 
                              can be set via the option -a A
        numberOfSimpleCycles  total number of simple cycles
                              in the graph
        numberOfNonIsoCycles  number of nonisomorphic cycles
                              in the graph
        numberOfBlocks     number of biconnected blocks
        numberOfBridges    number of bridges in a graph
        numberOfBridgeTrees   number of edges in the graph that are 
                              bridges. I.e. count the number of 
                              biconnected components with only one edge.
        numberOfConnectedComponents   number of connected components
        numberOfVertices   number of vertices in the graph
        numberOfEdges      number of edges in the graph
        maxCycleDegree     maximum cycle degree of a graph
        minCycleDegree     minimum cycle degree of a graph
        maxLocalEasiness   maximum local easiness of a graph, or -1 if there 
                              are more than A spanningTrees in some block of
                              the graph (default 100). A can be set via 
                              the option -a A
        minLocalEasiness   minimum local easiness of a graph, or -1 if there 
                              are more than A spanningTrees in all blocks of
                              the graph (default 100). A can be set via 
                              the option -a A
        maxDegree          maximum vertex degree of a graph
        minDegree          minimum vertex degree of a graph 
     -a 'value': an Integer (default 100). This value is used by some of the filters
                 that need an additional parameter to work (e.g. spanningTreeListing)  
     -o 'style': output style of the graphs fulfilling the filter criterion
        graph, g        output format identical to input format (default)
        idAndValue, iv  id of graph <space> value returned by filter criterion
        id, i           id of graph
        value, v        value returned by filter criterion
        print, p        print graphs in a very verbose format

