This is a frequent subtree mining tool.
Implemented by Pascal Welke 2016.

This program computes and outputs frequent subtrees according to several
definitions of that notion and feature representations of the mined graphs.

usage: ./lwg [options] [FILE]

If no FILE argument is given or FILE is - the program reads from stdin.
It always prints to stdout.


Options:

-t THRESHOLD:    Minimum absolute support threshold in the graph database

-p PATTERNSIZE:  Maximum size (number of vertices) of patterns returned

-o PATTERNFILE:  output the frequent subtrees in this file

-i VALUE:   Some embedding operators require a parameter that might be
                 a float between 0.0 and 1.0 or an integer >=1, depending 
                 on the operator.

-m METHOD:       Choose mining method among
             bfs: (default) mine in a levelwise fashion (like apriori). 
                 This results in better pruning behavior, but large memory 
                 footprint
             dfs: mine in a depth-first fashion (like FP-growth). This 
                 results in better memory footprint, but larger run time. 
                 
-e OPERATOR:     Choose embedding operator among
             subtree: (default) classical subtree isomorphism algorithm.
                 A pattern matches a graph, if it is subgraph isomorphic 
                 to it. Works only for forest transaction databases.
                 
             iterative: classical subtree isomorphism algorithm in an
                 iterative version. Uses more space than subtree, but 
                 might increase mining speed in some cases. Works only 
                 for forest transaction databases.
                 
             absImp: absolute importance threshold (specify using -i).
                 A pattern needs to be subtree of at least i connected
                 components of a graph to match the graph. Works only 
                 for forest transaction databases.
                 
             relImp: relative importance threshold (specify using -i).
                 A pattern needs to be subtree of at least a -i fraction
                 of connected components of a graph to match it. Works 
                 only for forest transaction databases.
                 
             andOr:  and or gap amplification. only works for exactly 16
                 sampled spanning trees. Works only for forest 
                 transaction databases.
                 
             localEasy: My implementation of the local easy subtree iso-
                 morphism algorithm. Works for arbitrary graph transaction 
                 databases. However, has polynomial delay only for local
                 easy graph databases.
                 
             localEasySampling: My implementation of the local easy tree 
                 sampling algorithm. Works for arbitrary graph transaction 
                 databases with polynomial delay. However, might result in
                 false negatives due to local spanning tree sampling. Sam-
                 pling rate can be influenced using -i. The parameter spe-
                 cifies the number of spanning trees that are sampled for
                 each set of v-rooted components. Hence, a higher -i results
                 in higher recall and higher runtime. 
                  
-h:              print this possibly helpful information.
