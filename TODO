# TODO


## BUGS
- ./gf -fcount -v6 -c'==' data/COLLAB.txt | valgrind ./lwg -p 10 -t 280 -i 10 -r 42 -e probabilisticTreeSampling 
  results in a segfault due to some issue in the loop erased random walk sampling of spanning trees.

## Refactoring
- [ ] rename SubtreeIsoDataStore* to SupportSet-something
      - [ ] rename internal pointers accordingly to hide implementation details
      - [ ] make iterativeSubtreeIso data store pointer void* to show that this is a general storage thingie. 


## General

- [X]  lwg pattern output file should contain their frequency in the database in the first column 
       (currently only the case for singleton patterns)
- [ ]  fix bug in sampleSubtrees.c
- [ ]  buffered canonicalString method that uses a preallocated array of ShallowGraph* for the qsort step
- [ ]  remove countCycleDegree.c and store the only important functionality somewhere (i.e. cycle degrees of all vertices)
- [ ]  make optimized vertex and edge counting methods work with importance embedding operator
- [ ]  countSpanningtrees (and most likely listSpanningTrees seem to not work) There is some memory issue.
- [ ]  Canonical String computation without recursion combined with center computation. (See Maurice Klaffehns Projektgruppe)
- [ ]  tree enumeration method update
		- [ ]  Gaston candidate generation?
		- [ ]  treeEnumeration might be too slow, as we do not enumerate perfectly
		- [ ]  an option to mine only frequent paths in lwg -> see treeEnumeration.c/generateCandidatePathSet
		- [ ]  is my canonical string method suited to be used for a good enumeration method: e.g., extend a given pattern only such that the resulting cString only gets changed 'at the end'?
		
- [ ]  different evaluation strategies: 
       - make dfs work again, 
       - implement the funny gaston dfs, 
       - implement the greedy dfs idea from the min-hashing paper for frequent subtree minig, ...
- [ ]  boosted mining should always select a root smartly, e.g., it should not be the center vertex of a neighborhood graph, but maybe a boring non-articulation vertex in some large biconnected component
- [ ]  build a treepattern enumerator
		- [ ]  input is a single graph with all 'frequent'/ allowed vertex and edge labels
		- [ ]  the embedding op is a mock that always returns yes.


## THEORY

- is it useful to choose particular roots for subgraph iso checks, e.g. canonical roots?



# DONE 

- [X]  why are the 'boosted' PSFs not boosting?
- [X]  speedup of labeledSubtreeIsomorphism by merging bipartite matching inside the subtree iso
- [X]  separate sampling methods from treeSamplingMain.c into a lib file
- [X]  extract weisfeiler lehman from treesampling into new executable
- [X]  getSampledSpanningtreeTree() should filter duplicate sampled spanning trees.

- a unified levelwise mining executable that does 
	- tree -> tree
	- tree -> forest
	- tree -> cactus (with bounded cycle degree)
	- tree -> k-easy block graph (with bounded cycle degree)
- levelwise: pruning and embedding should be separated.
- documentation of listSpanningTrees!
- check if isMaximalOuterplanar checks MAXIMAL outerplanar or just outerplanar: checks outerplanar
- maybe add a prefix for private methods (that are not exposed in the header files)
treeCenter
cs_Tree
cs_Compare
cs_Outerplanar
cs_Parsing
cs_Cycle
listComponents
listCycles
listSpanningTrees