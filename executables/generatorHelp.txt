This program generates a database of random graphs according to the 
Erdos-Renyi model.

Usage: ggen [ARGS] 
or ggen [ARGS] FILE

the first reads from stdin.

Parameters:
  -N int:    specify number of generated graphs (default 100)
  -a int:    lower bound on number of vertices in each graph (default 1)
  -b int:    upper bound on number of vertices in each graph (default 50)
  -c int:    number of different vertex labels (default 5)
  -d int:    number of different edge labels (default 1)
  -s int:    random seed (default current system time)
  -o:        Output graphs in dot/graphviz format for debugging or nice
             printing. 
  
  -x METHOD:
         erdosrenyi: ER Model graphs
           -p double: edge probability (default 0.5)
           -m double: (expected) edge multiplicity. If set, p will be
                     computed for each graph, such that the expected 
                     number of edges is m*n, where n is the number of
                     vertices, randomly chosen between a and b. 
                     (default: do not use this)
         
         overlap: generate n random 2-dim points in the unit cube [0,1]^2. 
            There exists an edge between v and w iff the euclidean distance
            is smaller than p. (I.p., if p >= sqrt(2), then g is connected.) 
            -p: distance between two points that requires an edge.
            -d: NOTE: d is ignored, all edges are labeled with '1'.
            
         iterativeOverlap: The first graph is generated using the overlap 
            method above. Subsequent graphs are generated by moving the 2d
            points randomly according to a 2d normal distribution centered at
            the points with a standard deviation defined by -m. All generated
            graphs will have the same number of vertices. 
            -p: distance between two points that requires an edge.
            -m: standard deviation of the random movement of the points.
            -d: NOTE: d is ignored, all edges are labeled with '1'.
         
         clusteredOverlap: generate -c clusters of points that are each 
            normally distributed around a center with standard deviation q.
            The vertices in each cluster are labeled with the cluster number.
            Each cluster will have the same number of members, the number of 
            vertices in the generated graphs may be lower than specified.   
            -p: distance between two points that requires an edge.
            -q: standard deviation of the clusters around the centroids.
            -d: NOTE: d is ignored, all edges are labeled with '1'.
            
         iterativeClusteredOverlap: The first graph is generated by the 
            clsteredOverlap method above.  Subsequent graphs are generated by 
            moving the 2d points randomly according to a 2d normal 
            distribution centered at the points with a standard deviation 
            defined by -m. All generated graphs will have the same number 
            of vertices. 
            -p: distance between two points that requires an edge.
            -q: standard deviation of the clusters around the centroids.
            -m: standard deviation of the random movement of the points.
            -d: NOTE: d is ignored, all edges are labeled with '1'.
            
         barabasiAlbert:
         
         barabasiAlbertAlpha:
         
         chains: